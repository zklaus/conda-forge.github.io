"use strict";(self.webpackChunkcf_infra_docs=self.webpackChunkcf_infra_docs||[]).push([[199],{51970:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>d,frontMatter:()=>r,metadata:()=>s,toc:()=>l});var a=n(85893),o=n(11151);const r={authors:["cj-wright"],tags:["autotick-bot"]},i="Automatically Deployed ABI Migrations",s={permalink:"/blog/2019/12/06/cfep09",editUrl:"https://github.com/zklaus/conda-forge.github.io/tree/refs/heads/main/blog/2019-12-06-cfep09.md",source:"@site/blog/2019-12-06-cfep09.md",title:"Automatically Deployed ABI Migrations",description:"Handling application binary interface (ABI) migrations has always been a",date:"2019-12-06T00:00:00.000Z",formattedDate:"December 6, 2019",tags:[{label:"autotick-bot",permalink:"/blog/tags/autotick-bot"}],readingTime:1.855,hasTruncateMarker:!0,authors:[{name:"Christopher J. 'CJ' Wright",title:"Member of conda-forge/core",url:"https://github.com/cj-wright",imageURL:"https://github.com/cj-wright.png",key:"cj-wright"}],frontMatter:{authors:["cj-wright"],tags:["autotick-bot"]},unlisted:!1,prevItem:{title:"Google Summer of Code 2020 improved automatic maintenance of conda-forge",permalink:"/blog/2020/02/04/gsoc"}},c={authorsImageUrls:[void 0]},l=[];function u(e){const t={code:"code",p:"p",...(0,o.a)(),...e.components};return(0,a.jsxs)(t.p,{children:["Handling application binary interface (ABI) migrations has always been a\nhassle for Conda-Forge. Maintaining ABI consistency helps enable the\n\"just use conda-forge\" experience for many of our users, making\ncertain that numpy's blas is the same as scipy's. As libraries update\ntheir code, the new versions may be ABI incompatible, as function\nsignatures and other symbols may have changed, leading to the dreaded\n",(0,a.jsx)(t.code,{children:"SegmentationFault"})," and other errors."]})}function d(e={}){const{wrapper:t}={...(0,o.a)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(u,{...e})}):u(e)}},11151:(e,t,n)=>{n.d(t,{Z:()=>s,a:()=>i});var a=n(67294);const o={},r=a.createContext(o);function i(e){const t=a.useContext(r);return a.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function s(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),a.createElement(r.Provider,{value:t},e.children)}}}]);